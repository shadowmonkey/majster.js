var js={isString:function(val){return"string"===$.type(val)},isUndefined:function(val){return void 0===val},isDefined:function(val){return!js.isUndefined(val)},isFunction:function(val){return"function"===$.type(val)},isNotFunction:function(val){return!js.isFunction(val)},generateUUID:function(){return Math.random().toString(36).substr(2,9)}};window.app=(new function(){var widgets={},mappings={},$params={},$tasks=[],processParams=function($element,$widgetParams){var params=[];return $.each($widgetParams,function(i,param){switch(param){case"$element":params.push($element);break;case"$data":params.push($element.data());break;default:if(js.isUndefined($params[param]))throw"Attribute "+param+" not found for widget";params.push($params[param])}}),params},mapping=function($element,id){var widget=widgets[id],callback=widget.callback,params=processParams($element,widget.params),uid=js.generateUUID();$element.attr("widget-init",!0),$element.attr("widget-uid",uid),callback.apply({},params),mappings[id+uid]={uid:uid,widgetId:id,element:$element,callback:callback}},remove=function($element){var widgetId=$element.attr("widget"),uid=$element.attr("widget-uid"),key=widgetId+uid;if(!js.isDefined(mappings[key]))throw new"Element is not under framework control";mappings[key].callback=function(){}},invokeWidgets=function($element){js.isDefined($element.attr("widget"))&&mapping($element,$element.attr("widget")),$element.find("[widget]").each(function(){var $this=$(this);if(js.isUndefined($this.attr("widget-init"))){var widgetId=$this.attr("widget");mapping($this,widgetId)}})},invokeTasks=function(){$.each($tasks,function(i,$task){var params=[];$.each($task.params,function(i,param){if(js.isUndefined($params[param]))throw"Attribute "+param+" not found for widget";params.push($params[param])});var callback=$task.callback;callback.apply({},params),$task.invoke=callback})},ready=function(){$(document).ready(function(){invokeWidgets($(document)),invokeTasks()})},public={set:function(name,callback){if("$data"===name||"$element"===name)throw"Name restricted for framework: "+$name;return $params[name]=callback,public},controller:function(widgetId,params,callback){if(js.isUndefined(widgetId))throw"widgetId is not defined";if(js.isNotFunction(callback))throw"class is undefined or is not function";if(js.isDefined(widgets[widgetId]))throw"widgetId is already defined: "+widgetId;return widgets[widgetId]={callback:callback,params:params},public},task:function(params,callback){return $tasks.push({params:params,callback:callback}),public},scan:invokeWidgets,remove:remove};return ready(),public}).set("$notify",new function(){var listeners={};return{listen:function(name,callback){js.isUndefined(listeners[name])&&(listeners[name]={callbacks:[]}),listeners[name].callbacks.push(callback)},send:function(name,params){js.isDefined(listeners[name])&&$.each(listeners[name].callbacks,function(i,callback){callback(params)})}}}).set("$delay",{call:function(time,callback){setTimeout(callback,time)}}).set("$interval",new function(){var intervals={},start=function(name){if(!js.isDefined(intervals[name]))throw"Interval not defined: "+name+". Can't start.";intervals[name].interval=setInterval(intervals[name].callback,intervals[name].time)};return{set:function(name,time,callback){return intervals[name]={callback:callback,time:time,interval:void 0},{start:function(){start(name)}}},start:start,stop:function(name){if(!js.isDefined(intervals[name]))throw"Interval not defined: "+name+". Can't stop.";clearInterval(intervals[name].interval)}}}).set("$websocket",new function(){var websockets={},start=function(name){var definition=websockets[name];if(js.isUndefined(definition))throw"Can't start websocket: "+name+". No definition found";if(definition.started)throw"Can't start websocket: "+name+". Already started";var websocket=new WebSocket(definition.url,definition.protocols);js.isFunction(definition.open)&&(websockets[name].started=start,websocket.onopen=definition.open),js.isFunction(definition.open)&&(websocket.onmessage=definition.message),js.isFunction(definition.open)&&(websocket.close=function(){websockets[name].started=!1,definition.close()}),websockets[name].websocket=websocket};return{define:function(name,url,protocols){if(!("WebSocket"in window))throw"WebSocket is not supported by browser";if(js.isDefined(websockets[name]))throw"Websocket "+name+" is already defined";websockets[name]={url:url,protocols:protocols,started:!1};var action={on:function(name,callback){switch(name){case"open":action.open(callback);break;case"message":action.message(callback);break;case"close":action.message(callback);break;case"error":action.error(callback);break;default:throw"Action "+name+" not found on $websocket"}return action},open:function(callback){return websockets[name].open=callback,action},message:function(callback){return websockets[name].message=callback,action},close:function(callback){return websockets[name].close=callback,action},error:function(callback){return websockets[name].error=callback,action},start:function(){start(name)}};return action},start:start,send:function(name,object){var websocket=websockets[name];if(js.isUndefined(websocket))throw"Can't send message. Websocket: "+name+" not found";if(!websocket.started)throw"Can't send message. Websocket: "+name+" is closed";websockets[name].websocket.send(object)},close:function(name){var websocket=websockets[name];if(js.isUndefined(websocket))throw"Can't close websocket. Websocket: "+name+" not found";if(!websocket.started)throw"Can't close websocket. Websocket: "+name+" is't started";websockets[name].websocket.close()},get:function(name){var websocket=websockets[name];if(js.isUndefined(websocket))throw"Can't close websocket. Websocket: "+name+" not found";return websocket}}}).controller("auto-scan",["$element"],function($component){var MutationObserver=window.MutationObserver||window.WebKitMutationObserver,observer=new MutationObserver(function(mutations){$.each(mutations,function(index,mutation){$.each(mutation.addedNodes,function(i,element){$element=$(element),app.scan($element)}),$.each(mutation.removedNodes,function(i,element){$element=$(element),js.isDefined($element.attr("widget"))&&app.remove($element),$element.find("[widget]").each(function(){app.remove($(this))})})})});observer.observe($component.get(0),{attributes:!0,childList:!0,subtree:!0})});var app=window.app;